name: API CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
    paths:
      - 'api/**'
      - '.github/workflows/api-ci.yml'
  pull_request:
    branches: [ main, development ]
    paths:
      - 'api/**'
      - '.github/workflows/api-ci.yml'

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'api/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./api
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./api
      run: npx eslint . --ext .js --format json --output-file eslint-report.json || true
      
    - name: Upload ESLint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report-api
        path: api/eslint-report.json
        
    - name: Run security audit
      working-directory: ./api
      run: npm audit --audit-level=moderate --json > security-audit.json || true
      
    - name: Upload security audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-api
        path: api/security-audit.json
        
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Check for security vulnerabilities
      working-directory: ./api
      run: |
        if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null; then
          echo "❌ High severity vulnerabilities found!"
          npm audit --audit-level=high
          exit 1
        else
          echo "✅ No high severity vulnerabilities found"
        fi
        
    - name: Run dependency check
      working-directory: ./api
      run: |
        echo "Checking for outdated dependencies..."
        npm outdated || true
        
    - name: Check for hardcoded secrets
      run: |
        echo "Scanning for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" api/ --exclude-dir=node_modules --exclude="*.json" | grep -v "process.env" | grep -v "//.*password\|//.*secret"; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        else
          echo "✅ No hardcoded secrets found"
        fi
        
    - name: Validate environment variables
      working-directory: ./api
      run: |
        echo "Checking for required environment variables..."
        if [ ! -f .env.example ]; then
          echo "❌ .env.example file not found!"
          exit 1
        fi
        echo "✅ .env.example file found"
        
    - name: Run code quality checks
      working-directory: ./api
      run: |
        echo "Running code quality checks..."
        # Check for console.log statements (should be removed in production)
        if grep -r "console\.log" . --exclude-dir=node_modules; then
          echo "⚠️  Warning: console.log statements found (consider removing for production)"
        fi
        
        # Check for TODO comments
        if grep -r "TODO\|FIXME\|HACK" . --exclude-dir=node_modules; then
          echo "ℹ️  Info: TODO/FIXME comments found"
        fi
        
    - name: Test API syntax
      working-directory: ./api
      run: |
        echo "Testing API syntax..."
        node -c index.js
        echo "✅ API syntax is valid"
        
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
        
  build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-security, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'api/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./api
      run: npm ci
      
    - name: Build API
      working-directory: ./api
      run: |
        echo "Building API..."
        # Add any build steps here if needed
        echo "✅ API build successful"
        
    - name: Test API endpoints (if tests exist)
      working-directory: ./api
      run: |
        if [ -f "package.json" ] && npm run test --if-present; then
          echo "✅ API tests passed"
        else
          echo "ℹ️  No tests found or tests skipped"
        fi
